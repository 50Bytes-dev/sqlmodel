"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è __sqlalchemy_hybrid_property_setters__
"""

from typing import Optional
from sqlalchemy.ext.hybrid import hybrid_property
from sqlmodel import Field, SQLModel


def test_hybrid_property_setters_field(clear_sqlmodel):
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è __sqlalchemy_hybrid_property_setters__"""

    class User(SQLModel, table=True):
        id: Optional[int] = Field(default=None, primary_key=True)
        name: str
        computed_value: Optional[str] = Field(default=None)

        @hybrid_property
        def display_name(self) -> str:
            """Hybrid property —Å setter"""
            return self.computed_value or self.name

        @display_name.inplace.setter
        def _display_name_setter(self, value: str) -> None:
            """Setter –¥–ª—è display_name"""
            self.computed_value = f"User: {value}"

        @hybrid_property
        def read_only_name(self) -> str:
            """Hybrid property –ë–ï–ó setter"""
            return f"ReadOnly: {self.name}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–µ —Å–æ–∑–¥–∞–ª–æ—Å—å –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ hybrid properties —Å setters
    assert hasattr(User, "__sqlalchemy_hybrid_property_setters__")

    # display_name –∏–º–µ–µ—Ç setter - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    assert "display_name" in User.__sqlalchemy_hybrid_property_setters__

    # read_only_name –ù–ï –∏–º–µ–µ—Ç setter - –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    assert "read_only_name" not in User.__sqlalchemy_hybrid_property_setters__

    # _display_name_setter - —Ñ—É–Ω–∫—Ü–∏—è setter - –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    assert "_display_name_setter" not in User.__sqlalchemy_hybrid_property_setters__

    print("‚úÖ –ü–æ–ª–µ __sqlalchemy_hybrid_property_setters__ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç: {list(User.__sqlalchemy_hybrid_property_setters__.keys())}")


def test_hybrid_property_setter_functionality(clear_sqlmodel):
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ hybrid property setter —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ –ø–æ–ª–µ"""

    class User(SQLModel, table=True):
        id: Optional[int] = Field(default=None, primary_key=True)
        name: str
        computed_value: Optional[str] = Field(default=None)

        @hybrid_property
        def display_name(self) -> str:
            return self.computed_value or self.name

        @display_name.inplace.setter
        def _display_name_setter(self, value: str) -> None:
            self.computed_value = f"User: {value}"

    # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    user = User(name="John Doe")
    user.display_name = "Custom Name"
    assert user.computed_value == "User: Custom Name"
    assert user.display_name == "User: Custom Name"

    # –¢–µ—Å—Ç model_validate
    test_data = {"id": 1, "name": "Jane Doe", "display_name": "Validated Name"}
    validated_user = User.model_validate(test_data)
    assert validated_user.computed_value == "User: Validated Name"
    assert validated_user.display_name == "User: Validated Name"

    print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å hybrid property setter —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ –ø–æ–ª–µ!")


if __name__ == "__main__":
    test_hybrid_property_setters_field()
    test_hybrid_property_setter_functionality()
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
